/**
 * @copyright Georgia Institute of Technology, 2024
 * @file: compute_pose_update.h
 * @author: ctaylor319@gatech.edu
 * @date: 09/16/2024
 * @brief: Feeds trajectory generated by GVIMP into a double PID controller with a
 * velocity smoothing algorithm applied at waypoint transitions.
 *
 */

#include <rclcpp/rclcpp.hpp>

class ComputePoseUpdate : public rclcpp::Node
{
enum ControllerMode {
    Default,
    Transition
};
public:

    ComputePoseUpdate();
    ~ComputePoseUpdate();

private:
    
    void VIMPCallback(motion_planning_msgs::msg::WaypointPath msg);
    void PoseCallback(nav_msgs::msg::Odometry msg);
    double Quat2Theta(geometry_msgs::msg::Quaternion q);
    void PIDControl(double distError, double angleError, double dt, geometry_msgs::msg::Twist &twist);
    void TransitionControl(double distError, Eigen::VectorXd currVel, Eigen::MatrixXd T, double dt, geometry_msgs::msg::Twist &twist);

    // Publishers and Subscribers
    rclcpp::Publisher<geometry_msgs::msg::Twist>::SharedPtr _pose_publisher;
    rclcpp::Subscription<nav_msgs::msg::Odometry>::SharedPtr _pose_subscriber;
    rclcpp::Subscription<motion_planning_msgs::msg::WaypointPath>::SharedPtr _path_subscriber;

    Eigen::VectorXd _curr_waypoint;
    std::queue<Eigen::VectorXd> _waypoint_queue;

    double _K_p_dist; double _K_p_angle;
    double _K_i_dist; double _K_i_angle;
    double _K_d_dist; double _K_d_angle;
    double _I_dist; double _I_angle;

    ControllerMode _mode;
    
    double _eps;
    double _prevDistError; double _prevAngleError;
    double _prevTime;
    
};