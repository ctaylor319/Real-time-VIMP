/**
 * @copyright Georgia Institute of Technology, 2024
 * @file: GVIMPImpl.h
 * @author: ctaylor319@gatech.edu
 * @date: 09/12/2024
 * @brief: generates an SDF as an obstacle input to the motion planning
 * algorithm.
 *
 */

#include <rclcpp/rclcpp.hpp>

#include "RobotArm3D.h"
#include "GVIMPRobotArm.h"

class GVIMPImpl : public rclcpp::Node
{
public:

    GVIMPImpl();
    ~GVIMPImpl();

private:
    
    rclcpp::Subscription<grid_map_msgs::msg::GridMap>::SharedPtr _gridmap_subscriber;
    rclcpp::Subscription<std_msgs::msg::Bool>::SharedPtr _path_status_subscriber;
    rclcpp::Subscription<control_msgs::msg::JointTrajectoryControllerState>::SharedPtr _robot_state_subscriber;
    rclcpp::Publisher<std_msgs::msg::Float32MultiArray>::SharedPtr _path_publisher;

    /**
     * @brief: callback function for when we receive an octomap message. Converts
     * and publishes as a grid_map message.
     * @param msg [in]: octomap message containing full map of surrounding environment.
     * Generated by octomap_server2 package.
     */
    void gridMapCallback(grid_map_msgs::msg::GridMap msg);
    void pathStatusCallback(std_msgs::msg::Bool msg);
    void StateCallback(control_msgs::msg::JointTrajectoryControllerState msg);
    gpmp2::SignedDistanceField generateSDF(grid_map_msgs::msg::GridMap msg);
    std::vector<float> convertToRosFloat(VectorXd res);

    bool _new_path_needed;
    std::unique_ptr<vimp::RobotArmMotionPlanner> _path_planner;
    VectorXd _start_pos, _goal_pos;
};