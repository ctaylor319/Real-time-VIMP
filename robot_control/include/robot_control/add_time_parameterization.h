/**
 * Georgia Institute of Technology, 2024
 * @file: add_time_parameterization.h
 * @author: ctaylor319@gatech.edu
 * @date: 09/16/2024
 * @brief: Adds time-stamps to the trajectory generated by motion planning.
 *
 */

#include "rclcpp/rclcpp.hpp"

const std::vector<std::string> arm_joints = {
    "link1_to_link2",
    "link2_to_link3",
    "link3_to_link4",
    "link4_to_link5",
    "link5_to_link6",
    "link6_to_link6flange"
};

const std::vector<std::string> gripper_joints = {
    "gripper_controller"
};

class AddTimeParameterization : public rclcpp::Node
{
public:

    AddTimeParameterization();
    ~AddTimeParameterization();

private:
    
    /**
     * @brief: callback function for when we receive a motion planning message. Adds
     * time stamps to each waypoint and publishes a complete robot trajectory
     * @param msg [in]: vector message containing waypoints from start to goal.
     */
    void VIMPCallback();
    // Publishers for arm and gripper joint trajectories
    rclcpp::Publisher<trajectory_msgs::msg::JointTrajectory>::SharedPtr _pose_publisher;

    // Timer for periodic callback
    rclcpp::TimerBase::SharedPtr _timer;

    // Frame ID for the joint trajectories
    std::string _frame_id;

    // Desired goal poses for the robotic arm and gripper
    std::vector<std::vector<double>> _arm_positions;
    
    trajectory_processing::TimeOptimalTrajectoryGeneration* _time_param_traj;

    // Index to keep track of the current trajectory point
    size_t _index;

    std::string _default_urdf_path;
    std::string _default_srdf_path;

    moveit::core::RobotModelConstPtr _model;
    robot_trajectory::RobotTrajectory* _robot_traj;
    const moveit::core::JointModelGroup* _group;
};